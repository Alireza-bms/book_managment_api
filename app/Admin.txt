===== File: PermissionController.php =====
<?php

namespace App\Http\Controllers\v1\Admin;

use App\Http\Controllers\v1\Controller;
use App\Http\Requests\Admin\{StorePermissionRequest, UpdatePermissionRequest};
use App\Services\Acl\PermissionService;
use Illuminate\Http\JsonResponse;
use Spatie\Permission\Models\Permission;

class PermissionController extends Controller
{
    protected PermissionService $permissionService;

    public function __construct(PermissionService $permissionService)
    {
        // Inject PermissionService to delegate business logic
        $this->permissionService = $permissionService;
    }

    /**
     * Display a list of all permissions
     */
    public function index(): JsonResponse
    {
        // Check permission for listing permissions
        $this->authorize('admin.permissions.index');

        return response()->json($this->permissionService->getAll());
    }

    /**
     * Store a newly created permission
     */
    public function store(StorePermissionRequest $request): JsonResponse
    {
        // Check permission for creating a new permission
        $this->authorize('admin.permissions.store');

        // Create new permission using service layer
        $permission = $this->permissionService->create($request->validated());

        return response()->json($permission, 201);
    }

    /**
     * Display a specific permission (Route Model Binding)
     */
    public function show(Permission $permission): JsonResponse
    {
        // Check permission for viewing a permission
        $this->authorize('admin.permissions.show');

        return response()->json($permission);
    }

    /**
     * Update a specific permission (Route Model Binding)
     */
    public function update(UpdatePermissionRequest $request, Permission $permission): JsonResponse
    {
        // Check permission for updating a permission
        $this->authorize('admin.permissions.update');

        // Update permission via service layer
        $updatedPermission = $this->permissionService->update($permission->id, $request->validated());

        return response()->json($updatedPermission);
    }

    /**
     * Remove a specific permission (Route Model Binding)
     */
    public function destroy(Permission $permission): JsonResponse
    {
        // Check permission for deleting a permission
        $this->authorize('admin.permissions.destroy');

        $this->permissionService->delete($permission->id);

        return response()->json(null, 204);
    }
}

----------------------------------------
===== File: RoleController.php =====
<?php

namespace App\Http\Controllers\v1\Admin;

use App\Http\Controllers\v1\Controller;
use App\Http\Requests\Admin\{StoreRoleRequest, UpdateRoleRequest};
use App\Services\Acl\RoleService;
use Illuminate\Http\JsonResponse;
use Spatie\Permission\Models\Role;

class RoleController extends Controller
{
    protected RoleService $roleService;

    public function __construct(RoleService $roleService)
    {
        // Inject RoleService to keep business logic in service layer
        $this->roleService = $roleService;
    }

    /**
     * Display a list of all roles
     */
    public function index(): JsonResponse
    {
        // Check permission for listing roles
        $this->authorize('admin.roles.index');

        return response()->json($this->roleService->getAll());
    }

    /**
     * Store a newly created role
     */
    public function store(StoreRoleRequest $request): JsonResponse
    {
        // Check permission for creating a role
        $this->authorize('admin.roles.store');

        // Use service to create role + permissions
        $role = $this->roleService->create($request->validated());

        // Return role with its permissions
        return response()->json($role->load('permissions'), 201);
    }

    /**
     * Display a specific role (Route Model Binding)
     */
    public function show(Role $role): JsonResponse
    {
        // Check permission for viewing a role
        $this->authorize('admin.roles.show');

        // Load related permissions for better API response
        return response()->json($role->load('permissions'));
    }

    /**
     * Update a specific role (Route Model Binding)
     */
    public function update(UpdateRoleRequest $request, Role $role): JsonResponse
    {
        // Check permission for updating a role
        $this->authorize('admin.roles.update');

        // Use service to update role
        $updatedRole = $this->roleService->update($role->id, $request->validated());

        return response()->json($updatedRole->load('permissions'));
    }

    /**
     * Remove a specific role (Route Model Binding)
     */
    public function destroy(Role $role): JsonResponse
    {
        // Check permission for deleting a role
        $this->authorize('admin.roles.destroy');

        $this->roleService->delete($role->id);

        return response()->json(null, 204);
    }
}

----------------------------------------
===== File: UserController.php =====
<?php

namespace App\Http\Controllers\v1\Admin;

use App\Http\Controllers\v1\Controller;
use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(User $user)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, User $user)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(User $user)
    {
        //
    }
}

----------------------------------------
