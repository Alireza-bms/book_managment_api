openapi: 3.0.3
info:
  title: Library Management API
  version: 1.0.0
  description: API for managing library, users, roles, permissions, and loans.

servers:
  - url: /api/v1
    description: Local server

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Profile
    description: User profile endpoints
  - name: Books
    description: CRUD operations for books
  - name: Authors
    description: CRUD operations for authors
  - name: Categories
    description: CRUD operations for categories
  - name: Loans
    description: Borrowing, returning, and canceling loans
  - name: Admin
    description: Admin-only endpoints for users, roles, permissions

paths:
  # -------------------------
  # Auth
  # -------------------------
  /register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, password_confirmation]
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                password_confirmation: { type: string }
      responses:
        '201': { description: User registered successfully }

  /login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user: { type: object }

  /logout:
    post:
      tags: [Auth]
      summary: Logout authenticated user
      responses:
        '204': { description: Logout successful }

  # -------------------------
  # Profile
  # -------------------------
  /profile:
    get:
      tags: [Profile]
      summary: Show authenticated user's profile
      responses:
        '200': { description: Profile data }
    put:
      tags: [Profile]
      summary: Update authenticated user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
      responses:
        '200': { description: Profile updated successfully }

  /profile/password:
    put:
      tags: [Profile]
      summary: Update authenticated user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [current_password, new_password, new_password_confirmation]
              properties:
                current_password: { type: string }
                new_password: { type: string }
                new_password_confirmation: { type: string }
      responses:
        '200': { description: Password updated successfully }

  # -------------------------
  # Books
  # -------------------------
  /books:
    get:
      tags: [Books]
      summary: Get paginated list of books
      parameters:
        - in: query
          name: include
          schema: { type: string }
          description: Include relations (category, authors)
      responses:
        '200': { description: Paginated list of books }
    post:
      tags: [Books]
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, authors, category_id, available_copies]
              properties:
                title: { type: string }
                authors:
                  type: array
                  items: { type: integer }
                category_id: { type: integer }
                available_copies: { type: integer }
      responses:
        '201': { description: Book created successfully }

  /books/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Books]
      summary: Get book by ID
      responses:
        '200': { description: Book details }
    put:
      tags: [Books]
      summary: Update book by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                authors:
                  type: array
                  items: { type: integer }
                category_id: { type: integer }
                available_copies: { type: integer }
      responses:
        '200': { description: Book updated successfully }
    delete:
      tags: [Books]
      summary: Delete book by ID
      responses:
        '204': { description: Book deleted successfully }

  # -------------------------
  # Authors
  # -------------------------
  /authors:
    get:
      tags: [Authors]
      summary: Get paginated list of authors
      responses:
        '200': { description: Paginated list of authors }
    post:
      tags: [Authors]
      summary: Create a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        '201': { description: Author created successfully }

  /authors/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Authors]
      summary: Get author by ID
      responses:
        '200': { description: Author details }
    put:
      tags: [Authors]
      summary: Update author by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: Author updated successfully }
    delete:
      tags: [Authors]
      summary: Delete author by ID
      responses:
        '204': { description: Author deleted successfully }

  # -------------------------
  # Categories
  # -------------------------
  /categories:
    get:
      tags: [Categories]
      summary: Get paginated list of categories
      responses:
        '200': { description: Paginated list of categories }
    post:
      tags: [Categories]
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        '201': { description: Category created successfully }

  /categories/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Categories]
      summary: Get category by ID
      responses:
        '200': { description: Category details }
    put:
      tags: [Categories]
      summary: Update category by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: Category updated successfully }
    delete:
      tags: [Categories]
      summary: Delete category by ID
      responses:
        '204': { description: Category deleted successfully }

  # -------------------------
  # Loans
  # -------------------------
  /loans:
    post:
      tags: [Loans]
      summary: Borrow a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [book_id]
              properties:
                book_id: { type: integer }
      responses:
        '201': { description: Loan created successfully }

  /loans/{loan}/return:
    parameters:
      - in: path
        name: loan
        required: true
        schema: { type: integer }
    post:
      tags: [Loans]
      summary: Return a borrowed book
      responses:
        '200': { description: Loan returned successfully }

  /loans/{loan}/cancel:
    parameters:
      - in: path
        name: loan
        required: true
        schema: { type: integer }
    post:
      tags: [Loans]
      summary: Cancel an active loan
      responses:
        '200': { description: Loan canceled successfully }

  # -------------------------
  # Admin Users
  # -------------------------
  /admin/users:
    get:
      tags: [Admin]
      summary: Get paginated list of users
      responses:
        '200': { description: List of users }
    post:
      tags: [Admin]
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                roles:
                  type: array
                  items: { type: string }
      responses:
        '201': { description: User created successfully }

  /admin/users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Admin]
      summary: Get user by ID
      responses:
        '200': { description: User details }
    put:
      tags: [Admin]
      summary: Update user by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                roles:
                  type: array
                  items: { type: string }
      responses:
        '200': { description: User updated successfully }
    delete:
      tags: [Admin]
      summary: Delete user by ID
      responses:
        '204': { description: User deleted successfully }

  # -------------------------
  # Admin Roles
  # -------------------------
  /admin/roles:
    get:
      tags: [Admin]
      summary: Get list of roles
      responses:
        '200': { description: List of roles }
    post:
      tags: [Admin]
      summary: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                permissions:
                  type: array
                  items: { type: string }
      responses:
        '201': { description: Role created successfully }

  /admin/roles/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Admin]
      summary: Get role by ID
      responses:
        '200': { description: Role details }
    put:
      tags: [Admin]
      summary: Update role by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                permissions:
                  type: array
                  items: { type: string }
      responses:
        '200': { description: Role updated successfully }
    delete:
      tags: [Admin]
      summary: Delete role by ID
      responses:
        '204': { description: Role deleted successfully }

  # -------------------------
  # Admin Permissions
  # -------------------------
  /admin/permissions:
    get:
      tags: [Admin]
      summary: Get list of permissions
      responses:
        '200': { description: List of permissions }
    post:
      tags: [Admin]
      summary: Create a new permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        '201': { description: Permission created successfully }

  /admin/permissions/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Admin]
      summary: Get permission by ID
      responses:
        '200': { description: Permission details }
    put:
      tags: [Admin]
      summary: Update permission by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '200': { description: Permission updated successfully }
    delete:
      tags: [Admin]
      summary: Delete permission by ID
      responses:
        '204': { description: Permission deleted successfully }
