===== File: AuthorSeeder.php =====
<?php

namespace Database\Seeders\v1;

use App\Models\Author;
use Illuminate\Database\Seeder;

class AuthorSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $authors = include database_path('data/v1/authors.php');


        foreach ($authors as $author) {
            Author::create($author);
        }
    }
}

----------------------------------------
===== File: BookSeeder.php =====
<?php

namespace Database\Seeders\v1;

use App\Models\Book;        // مدل Book که جدول books رو نمایندگی می‌کنه
use Illuminate\Database\Seeder;

class BookSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Load book data from external PHP file
        $books = include database_path('data/v1/books.php');

        foreach ($books as $bookData) {
            // Extract authors IDs if exists, then remove from bookData
            $authors = $bookData['authors'] ?? [];
            unset($bookData['authors']); // authors نباید مستقیم تو جدول books ذخیره بشه

            // Merge with default values to ensure all necessary columns exist
            $bookData = array_merge([
                'title'            => null,
                'isbn'             => null,
                'published_year'   => null,
                'category_id'      => null,
                'total_copies'     => 1,
                'available_copies' => 1,
                'description'      => null
            ], $bookData);

            // Create a new Book record
            $book = Book::create($bookData);

            // Attach authors to the book via pivot table (many-to-many relationship)
            if (!empty($authors)) {
                $book->authors()->attach($authors);
            }
        }
    }
}

----------------------------------------
===== File: CategorySeeder.php =====
<?php

namespace Database\Seeders\v1;

use App\Models\Category;
use Illuminate\Database\Seeder;

class CategorySeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $categories = include database_path('data/v1/categories.php');


        foreach ($categories as $category) {
            Category::create($category);
        }
    }
}

----------------------------------------
===== File: LoanSeeder.php =====
<?php

namespace Database\Seeders\v1;

use App\Models\Book;
use App\Models\Loan;
use Illuminate\Database\Seeder;

class LoanSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $loans = include database_path('data/v1/loans.php');

        foreach ($loans as $loan) {
            $loanRecord = Loan::create([
                'user_id' => $loan['user_id'],
                'book_id' => $loan['book_id'],
                'loaned_at' => $loan['loaned_at'] ?? now(),
                'due_at' => $loan['due_at'] ?? now()->addDays(7),
                'returned_at' => $loan['returned_at'] ?? null,
            ]);

            $book = Book::find($loan['book_id']);

            if ($book) {
                // Decrease available copies when loan is created
                $book->decrement('available_copies');

                // If the loan is returned, increase available copies back
                if (!empty($loan['returned_at'])) {
                    $book->increment('available_copies');
                }
            }
        }
    }
}

----------------------------------------
===== File: RolePermissionSeeder.php =====
<?php

namespace Database\Seeders\v1;

use Illuminate\Database\Seeder;
use App\Models\User;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class RolePermissionSeeder extends Seeder
{
    public function run()
    {
        // Clear cached roles & permissions
        app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

        // -----------------------
        // 1. Create Permissions
        // -----------------------
        $permissions = [
            // Books
            'books.index',
            'books.show',
            'books.store',
            'books.update',
            'books.destroy',

            // Authors
            'authors.index',
            'authors.show',
            'authors.store',
            'authors.update',
            'authors.destroy',

            // Categories
            'categories.index',
            'categories.show',
            'categories.store',
            'categories.update',
            'categories.destroy',

            // Loans (only librarian)
            'loans.store',    // register borrow
            'loans.update',   // register return

            // Admin panel
            'admin.users.index',
            'admin.users.store',
            'admin.users.show',
            'admin.users.update',
            'admin.users.destroy',

            'admin.roles.index',
            'admin.roles.store',
            'admin.roles.show',
            'admin.roles.update',
            'admin.roles.destroy',

            'admin.permissions.index',
            'admin.permissions.store',
            'admin.permissions.show',
            'admin.permissions.update',
            'admin.permissions.destroy',
        ];

        foreach ($permissions as $perm) {
            Permission::firstOrCreate(['name' => $perm]);
        }

        // -----------------------
        // 2. Create Roles
        // -----------------------
        $adminRole = Role::firstOrCreate(['name' => 'admin']);
        $librarianRole = Role::firstOrCreate(['name' => 'librarian']);
        $userRole = Role::firstOrCreate(['name' => 'user']);

        // -----------------------
        // 3. Assign Permissions to Roles
        // -----------------------

        // Admin → full access
        $adminRole->syncPermissions($permissions);

        // Librarian → manage library & loans
        $librarianPermissions = [
            'books.index', 'books.show', 'books.store', 'books.update', 'books.destroy',
            'authors.index', 'authors.show', 'authors.store', 'authors.update', 'authors.destroy',
            'categories.index', 'categories.show', 'categories.store', 'categories.update', 'categories.destroy',
            'loans.store', 'loans.update',  // handle borrowing/return
        ];
        $librarianRole->syncPermissions($librarianPermissions);

        // User → limited access (view only)
        $userPermissions = [
            'books.index', 'books.show',
            'authors.index', 'authors.show',
            'categories.index', 'categories.show',
        ];
        $userRole->syncPermissions($userPermissions);

        // -----------------------
        // 4. Assign Roles to Sample Users
        // -----------------------
        $admin = User::where('email', 'admin@example.com')->first();
        $admin?->assignRole('admin');

        $librarian = User::where('email', 'librarian@example.com')->first();
        $librarian?->assignRole('librarian');

        $user = User::where('email', 'user@example.com')->first();
        $user?->assignRole('user');
    }
}

----------------------------------------
===== File: UserSeeder.php =====
<?php

namespace Database\Seeders\v1;

use App\Models\User;
use Illuminate\Database\Seeder;

class UserSeeder extends Seeder
{
    public function run(): void
    {
        // Load fake users data from external file
        $users = require database_path('data/v1/users.php');

        foreach ($users as $data) {
            // Extract roles and remove them from user attributes
            $roles = $data['roles'] ?? [];
            unset($data['roles']);

            // Create or get user by email
            $user = User::firstOrCreate(
                ['email' => $data['email']],
                $data
            );

            // Assign roles (sync to avoid duplicates)
            if (!empty($roles)) {
                $user->syncRoles($roles);
            }
        }
    }
}

----------------------------------------
